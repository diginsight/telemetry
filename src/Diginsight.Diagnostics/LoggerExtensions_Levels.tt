<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".g.cs" #>
#nullable enable
#if NET7_0_OR_GREATER
using Diginsight.Logging;
using Microsoft.Extensions.Logging;
using System.Runtime.CompilerServices;
#endif

namespace Diginsight.Diagnostics;

public static partial class LoggerExtensions
{
#if NET7_0_OR_GREATER
<#
    foreach (string logLevel in new[] { "Trace", "Debug", "Information", "Warning", "Error", "Critical" })
    {
#>
    [Obsolete("Moved to `Diginsight.Logging` namespace")]
#if NET9_0_OR_GREATER
    [OverloadResolutionPriority(-1)]
#endif
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Log<#= logLevel #>(
        // ReSharper disable once EntityNameCapturedOnly.Global
        this ILogger logger,
        EventId eventId,
        Exception? exception,
        [InterpolatedStringHandlerArgument(nameof(logger))]
        in Log<#= logLevel #>InterpolatedStringHandler message,
        ValueTuple dummy = default
    )
    {
        Diginsight.Logging.LoggerExtensions.Log<#= logLevel #>(logger, eventId, exception, in message);
    }
    
    [Obsolete("Moved to `Diginsight.Logging` namespace")]
#if NET9_0_OR_GREATER
    [OverloadResolutionPriority(-1)]
#endif
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Log<#= logLevel #>(
        this ILogger logger,
        Exception? exception,
        [InterpolatedStringHandlerArgument(nameof(logger))]
        in Log<#= logLevel #>InterpolatedStringHandler message,
        ValueTuple dummy = default
    )
    {
        Log<#= logLevel #>(logger, default, exception, in message);
    }
    
    [Obsolete("Moved to `Diginsight.Logging` namespace")]
#if NET9_0_OR_GREATER
    [OverloadResolutionPriority(-1)]
#endif
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Log<#= logLevel #>(
        this ILogger logger,
        [InterpolatedStringHandlerArgument(nameof(logger))]
        in Log<#= logLevel #>InterpolatedStringHandler message,
        ValueTuple dummy = default
    )
    {
        Log<#= logLevel #>(logger, null, in message);
    }

<#
    }
#>
#endif
}
